import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
%matplotlib inline
import numpy as np

(x_train,y_train),(x_test,y_test)=keras.datasets.mnist.load_data()


len(x_train)

x_train[0].shape

x_train[0]

plt.matshow(x_train[0])

y_train[0]

x_train[0]

x_train_flattend=x_train.reshape(len(x_train),28*28)
x_test_flattend=x_test.reshape(len(x_test),28*28)

x_train_flattend.shape

x_train_flattend[0]

model=keras.Sequential([
    keras.layers.Dense(10,input_shape=(784,),activation='sigmoid')
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train_flattend,y_train,epochs=5)



model.evaluate(x_test_flattend,y_test)

y_predicted=model.predict(x_test_flattend)
y_predicted[0]

plt.matshow(x_test[0])

np.argmax(y_predicted[0])

y_predicted_labels=[np.argmax(i) for i in y_predicted]

y_predicted_labels[:5]


cm=tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)
cm

import seaborn as sn
plt.figure(figsize=(10,10))
sn.heatmap(cm,annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')



model=keras.Sequential([
    keras.layers.Dense(100,input_shape=(784,),activation='relu'),
    keras.layers.Dense(10,activation='sigmoid')
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train_flattend,y_train,epochs=5)


model.evaluate(x_test_flattend,y_test)


y_predicted=model.predict(x_test_flattend)
y_predicted[0]

plt.matshow(x_test[0])

